print("manikanta")
import heapq

# Goal state
GOAL_STATE = [[1, 2, 3],
              [4, 5, 6],
              [7, 8, 0]]

# Helper: Convert a 2D list to a tuple of tuples for hashing
def to_tuple(state):
    return tuple(tuple(row) for row in state)

# Heuristic: Manhattan Distance
def manhattan_distance(state):
    distance = 0
    for i in range(3):
        for j in range(3):
            value = state[i][j]
            if value != 0:
                target_x = (value - 1) // 3
                target_y = (value - 1) % 3
                distance += abs(i - target_x) + abs(j - target_y)
    return distance

# Find the position of the blank (0)
def find_blank(state):
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:
                return i, j

# Generate possible moves
def get_neighbors(state):
    neighbors = []
    x, y = find_blank(state)
    directions = [(-1,0), (1,0), (0,-1), (0,1)]  # up, down, left, right
    for dx, dy in directions:
        nx, ny = x + dx, y + dy
        if 0 <= nx < 3 and 0 <= ny < 3:
            new_state = [list(row) for row in state]
            new_state[x][y], new_state[nx][ny] = new_state[nx][ny], new_state[x][y]
            neighbors.append(new_state)
    return neighbors

# A* algorithm
def a_star(start_state):
    start = to_tuple(start_state)
    goal = to_tuple(GOAL_STATE)
    frontier = []
    heapq.heappush(frontier, (0 + manhattan_distance(start_state), 0, start_state, []))
    visited = set()

    while frontier:
        est_total_cost, cost, current, path = heapq.heappop(frontier)
        current_tuple = to_tuple(current)

        if current_tuple in visited:
            continue
        visited.add(current_tuple)

        if current_tuple == goal:
            return path + [current]

        for neighbor in get_neighbors(current):
            neighbor_tuple = to_tuple(neighbor)
            if neighbor_tuple not in visited:
                heapq.heappush(frontier, (
                    cost + 1 + manhattan_distance(neighbor),
                    cost + 1,
                    neighbor,
                    path + [current]
                ))

    return None  # No solution

# Pretty print the board
def print_board(state):
    for row in state:
        print(" ".join(str(x) if x != 0 else '_' for x in row))
    print()

# Example usage
if __name__ == "__main__":
    initial_state = [[1, 2, 3],
                     [4, 0, 6],
                     [7, 5, 8]]
    
    print("Initial state:")
    print_board(initial_state)

    solution = a_star(initial_state)
    
    if solution:
        print("Solution found in", len(solution) - 1, "moves:")
        for step in solution:
            print_board(step)
    else:
        print("No solution found.")
